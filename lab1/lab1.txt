#############################################################################################
utorid: kimyu9 
name: kyu bum kim 
email: kb.kim@mail.utoronto.ca
#############################################################################################
Q1: List the function you think might be important to optimize to in lab2's soruce code?
A1: processRotateCCWReference or processRotateCWReference as they use a triple
for loop for the process 
Multi-line answers are fine.
Do not modify the "###" lines or the question line above your answer. 
#############################################################################################
Q2: Report the 6 measurements using the slowest method of compilation as a baseline, report the speedup for each of the five measurements. Eg., if gcov was the slowest, and -g was twice as fast as gcov, then the speedup for -g relative to gcov would be 2.0.
A2: 
raw values:
 gprof time = 0.19
 gcov = 0.21
 -g = 0.184
 -O2 = 0.334
 -O3 = 0.39
 -Os = 0.318

Slowest >>> Fastest (2 sig figs, all averages in seconds, speedup relative to
slowest, -03)
 -O3: 0.39
    speedup: 1.18
 -02: 0.33
    speedup: 1.22
 -Os: 0.32 
    speedup: 1.86
 gcov: 0.21 
    speedup: 2.05
 gprof: 0.19
    speedup: 2.17
 -g: 0.18


#############################################################################################
Q3: Which is the slowest and why?
A3: 
 -O3 does the most amount of compiler optimizations which takes up time to
do. Therefore, requiring the most amount of time compared to everything
else. Compared to -O2, it does the same optimizations and adds further
optimization flags which adds more time. Morever, it also tries to reduce the size of the code once compiled which also
takes additional time. 
#############################################################################################
Q4: Which is the fastest and why?
A4: 
  -g is the fastest since it does not apply any optimizations of any sort when
compiling. it simply adds a debugger.
#############################################################################################
Q5: Which of gprof and gcov is faster and why?
A5: gprof is faster since it requires less tracking for each of the
instructions. gprof only requires interruptions every couple seconds, meanwhile
gcov requires to track every line of each function. The compiler, as it
converts a file to an object file, requires less time for intermittent
interrupts in gprof vs tracking all instructions in gcov. 
#############################################################################################
Q6: Report the six measurements using the smallest method of compilation as a baseline, report the relative size increase for each of the six measurements. Eg., if -g was the smallest, and gprof was twice the size of -g, then the relative size increase for gprof relative to -g would be 2.0
A6:
raw values:
  gprof: 63816 B
  gcov: 100544 B
  -g: 63616 B
  -O2: 33080 B
  -O3: 37144 B
  -Os: 29046 B 

Smallest >>> largest (all in bytes, relative numbers shown 2 sigfig relative
to smallest)
 -Os: 29046
    size increase: 1.14
 -02: 33080
    size increase: 1.28
 -O3: 37144 
    size increase: 2.19
 -g: 63616 
    size increase: 2.20
 gprof: 63816
    size increase: 3.46
 gcov: 100544


#############################################################################################
Q7: Which is the smallest and why?
A7: -Os is the smallest since this flag optimizes the program for the file
size. In the gcc documentation, it says that -Os removes optimizations that
often increase code size in the -O3 optimization. Therefore has the smallest
size overall. 
#############################################################################################
Q8: Which is the largest and why?
A8: gcov is the largest since it requires tracking of each line of code within
the program. This will take up more instructions causing an increase in program
size. Additionally, this flag does not optimize for code size. it requires implementation 
of counters to keep track of function calls thus increasing space overall. 
#############################################################################################
Q9: Which of gprof and gcov is smaller and why?
A9: gprof is smaller since it only needs interrupts every 10ms which does not
require a lot of instructions. It might only require a few instructions for the
intitial setup of the interupts thus not effecting the size dramatically.
Moreover, it only tracks function calls and timing which would not require as
much instructions compared to gcov where it tracks all the executed lines of
code. 
#############################################################################################
Q10: Report the six measurements using the slowest measurement as a baseline, also report the speedup for each version.
A10: 
raw values:
  gprof: 1:23.77 = 83.77s
  gcov: 1:29.57 = 89.57s
  -g: 1:24.87 = 84.87s
  -O2: 31.99s 
  -O3: 27.49s 
  -Os: 31.56s

slowest >>> fastest (all in seconds, relative numbers shown 2 sigfig relative
to slowest)
  gcov: 89.57
     speedup: 1.06
  -g: 84.87
     speedup: 1.07
  gprof: 83.77 
     speedup: 2.80
  -02: 31.99
     speedup: 2.83
  -Os: 31.56
     speedup: 3.26
 -O3: 27.49

#############################################################################################
Q11: Which is the slowest and why?
A11: gcov is the slowest since it requires to keep track of all the
instructions and whether or not it executed or not. This takes up time due to
the amount of processing required by the program. More instructions requires
more time. 
#############################################################################################
Q12: Which is the fastest and why?
A12: -O3 is the fastest since it is the most optimized program out of all the
other programs in terms of execution time. Compared to gcov or gprof, it does
not require tracking nor debugging like -g. Thus this is the fastest. Moreover, it has
the smaller amount of instructions due to the optimizations. Therefore, taking the least 
amount of time. 
#############################################################################################
Q13: Which of grof and gcov is faster and why?
A13: gprof is faster since it does not require tracking of all lines, rather
only requires interrupts every 10ms to see length of execution times of each
function. gcov checks each function and counts where it is executed which may 
take more clock cycles thus more time. 
#############################################################################################
Q14: For each version, list the top 3 functions (give function name and percentage execution time)
A14: <your answer here>
  -g -pg
    processRotateCWReference 51.75%
    copyFrame 41.41%
    processMoveUpReference 1.71%
  -O2 -pg:
    processRotateCWReference 61.36%
    copyFrame 32.8%
    processMoveUpReference 1.28%
  -O3 -pg:
    processRotateCCWReference 59.83%
    copyFrame 32.06%
    processRotateCWReference 3.02%
#############################################################################################
Q15: For the "number-one" function for -O3 (the one with the greatest percentage execution time), how does its percentage execution time compare with the percentage execution time for the same function in the -g version? How is this possible? What transformation did the compiler do and to which functions?
A15: processRotateCCWReference becomes the largest after -O3 execution meanwhile
processRotateCWReference is the largest execution time in -g flag. Maybe the compiler sees that
processRotateCWReference is called many times, so the compiler executes LICM due to the triple 
for loop. Moreover, due to the number of loops, the compiler maybe applies unrolling methods
so that its further optimized. Therefore in -O3, processRotateCCWReference takes up more time
due to the lack of times being called and being ignored by the compiler as
something to be optimized. 
#############################################################################################
Q16: Count the instructions for the function "number-one" function identified in the previous question and report the counts, as well as the reduction (reported as a ratio) in number of instructions for the -O3 version (ie., if the -O3 version has half as many instructions as the -g version, the reduction is 2.0x).
A16: <your answer here>
152 for -O3 
89 for -g
0.59 increase in number of instructions from -O3 to -g
or
1.71 decrease in number of instructions from -O3 to -g
#############################################################################################
Q17: Based only on the gcov results (ie., donâ€™t think too much about what the code says) list the functions in the order that you would focus on optimizing them for the provided lab1 inputs and why. Identify each location by its line numbers in the original source file.
A17: 
processRotateCWReference due to the large number of calls (1720) line 224
processRotateCCWReference due to number of loops on this function (similar to
clockwise function) yet less number of calls but can be further optimized line
269
processMoveLeftReference due to the largest amount of calls triggered on this function line 78
processMoveRightReference due to second largest amount of calls that have not yet been covered
line 176
processMoveUpReference, processMoveDownReference as they have the same amount of calls and 
are not relaticvly a difficult task lines 29, 127 respectivly
processMirrorXReference has the second least amount of calls lines 295
processMirrorYReference has the least amount of calls lines 398
#############################################################################################
Q18(Bonus): Name the shortest GCC compiler flag where the compiler optimization it enables requires memory alignment. How many bytes does the data needs to be aligned?
A18: 
  -O2, 2^n n<=16
